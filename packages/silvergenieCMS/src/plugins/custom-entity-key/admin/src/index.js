import { prefixPluginTranslations } from "@strapi/helper-plugin";
import pluginPkg from "../../package.json";
import pluginId from "./pluginId";
import Initializer from "./components/Initializer";
import PluginIcon from "./components/PluginIcon";
console.log("pluginId", pluginId);
const name = pluginPkg.strapi.name;

export default {
  register(app) {
    // app.addMenuLink({
    //   to: `/plugins/${pluginId}`,
    //   icon: PluginIcon,
    //   intlLabel: {
    //     id: `${pluginId}.plugin.name`,
    //     defaultMessage: name,
    //   },
    //   Component: async () => {
    //     const component = await import(
    //       /* webpackChunkName: "[request]" */ "./pages/App"
    //     );

    //     return component;
    //   },
    //   permissions: [
    //     // Uncomment to set the permissions of the plugin here
    //     // {
    //     //   action: '', // the action name should be plugin::plugin-name.actionType
    //     //   subject: null,
    //     // },
    //   ],
    // });

    app.customFields.register({
      name: "unique-key",
      pluginId: "custom-entity-key",
      plugin: "custom-entity-key",
      type: "string",
      intlLabel: {
        id: "entity-key.form.label",
        defaultMessage: "Entity Key Field",
      },
      intlDescription: {
        id: "entity-key.form.description",
        defaultMessage: "Autogenerated Custom Entity Key",
      },
      icon: PluginIcon,
      components: {
        Input: async () =>
          import(
            /* webpackChunkName: "input-component" */ "./components/Input"
          ),
      },
      options: {
        base: [
          {
            sectionTitle: {
              id: "entity-key.form.attributes",
              defaultMessage: "Default Value",
            },
            items: [
              // Add settings items to the section
              {
                intlLabel: {
                  id: "entity-key.form.attributes.label",
                  defaultMessage:
                    "comma separated attribute to construct unique key",
                },
                name: "options.attributes",
                type: "string",
              },
            ],
          },
          // {
          //   sectionTitle: {
          //     id: "entity-key.form.pattern",
          //     defaultMessage: "entity-key Pattern",
          //   },
          //   items: [
          //     // Add settings items to the section
          //     {
          //       intlLabel: {
          //         id: "entity-key.form.pattern.label",
          //         defaultMessage: "Create a entity-key pattern",
          //       },
          //       name: "options.pattern",
          //       type: "select",
          //       options: [
          //         {
          //           key: "title",
          //           value: "title",
          //           metadatas: {
          //             intlLabel: {
          //               id: "entity-key.form.pattern.title",
          //               defaultMessage: "title",
          //             },
          //           },
          //         },
          //         {
          //           key: "id",
          //           value: "id",
          //           metadatas: {
          //             intlLabel: {
          //               id: "entity-key.form.pattern.id",
          //               defaultMessage: "id",
          //             },
          //           },
          //         },
          //         {
          //           key: "datetime",
          //           value: "datetime",
          //           metadatas: {
          //             intlLabel: {
          //               id: "entity-key.form.pattern.datetime",
          //               defaultMessage: "datetime",
          //             },
          //           },
          //         },
          //       ],
          //     },
          //   ],
          // },
        ],
      },
    });

    // app.registerPlugin({
    //   id: pluginId,
    //   initializer: Initializer,
    //   isReady: false,
    //   name,
    // });
  },

  bootstrap(app) {},
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(
      locales.map((locale) => {
        return import(
          /* webpackChunkName: "translation-[request]" */ `./translations/${locale}.json`
        )
          .then(({ default: data }) => {
            return {
              data: prefixPluginTranslations(data, pluginId),
              locale,
            };
          })
          .catch(() => {
            return {
              data: {},
              locale,
            };
          });
      })
    );

    return Promise.resolve(importedTrads);
  },
};
